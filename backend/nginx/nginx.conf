user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;

    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # Gzip Settings
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=20r/m;

    # Upstream servers
    upstream backend {
        server backend:3000;
        keepalive 32;
    }

    # WebSocket upgrade headers
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Main server block
    server {
        listen 80;
        server_name localhost *.bigfootlive.com;

        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # CORS for API endpoints
        location /api/ {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;

            # Rate limiting
            limit_req zone=api burst=200 nodelay;

            # Proxy to backend
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # WebSocket endpoint for real-time features
        location /socket.io/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 3600s;
        }

        # HLS streaming files
        location /hls/ {
            alias /var/www/html/live/;
            
            # CORS headers for video streaming
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Range' always;
            
            # Cache control for HLS segments
            location ~* \.m3u8$ {
                expires -1;
                add_header Cache-Control no-cache;
            }
            
            location ~* \.ts$ {
                expires 1h;
                add_header Cache-Control public;
            }
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Range';
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain';
                return 204;
            }
        }

        # Health check endpoint
        location /health {
            proxy_pass http://backend/health;
            access_log off;
        }

        # Static files and assets
        location /assets/ {
            alias /var/www/html/assets/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Thumbnails and images
        location /thumbnails/ {
            alias /var/www/html/thumbnails/;
            expires 1d;
            add_header Cache-Control "public";
        }

        # Recordings and DVR files
        location /recordings/ {
            alias /var/www/html/dvr/;
            expires 1d;
            add_header Cache-Control "public";
            
            # Only allow authenticated access to recordings
            auth_request /auth;
        }

        # Internal auth endpoint for recording access
        location = /auth {
            internal;
            proxy_pass http://backend/api/auth/verify;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
        }

        # Metrics endpoint (restricted access)
        location /metrics {
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            proxy_pass http://backend/metrics;
        }

        # Default location - serve frontend or redirect
        location / {
            # In production, this would serve the React frontend
            # For now, proxy to backend for API documentation or health check
            return 301 /api/health;
        }

        # Security: Block common attack patterns
        location ~* \.(env|git|sql|log|ini)$ {
            deny all;
            return 404;
        }

        # Block dotfiles
        location ~ /\. {
            deny all;
            return 404;
        }
    }
}

# RTMP configuration for SRS integration
# Note: This would typically be in a separate SRS configuration
# but included here for reference
#
# rtmp {
#     server {
#         listen 1935;
#         chunk_size 4096;
#         
#         application live {
#             live on;
#             
#             # Authentication
#             on_publish http://backend:3000/api/streaming/auth/publish;
#             
#             # Recording
#             record all;
#             record_path /var/recordings;
#             record_suffix .flv;
#             
#             # HLS
#             hls on;
#             hls_path /var/www/html/live;
#             hls_fragment 3;
#             hls_playlist_length 60;
#         }
#     }
# }
